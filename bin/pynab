#!/bin/sh
# Manage Pynab services
# ------------------------------
set_defaults() {
	SELF=$(basename "${0}")

	SYSTEMD_DIR="/lib/systemd/system"
	LOG_DIR="/var/log"
	LOG_OPTS="-v"
	STATUS_OPTS="--no-pager --full"

	# Pynab services to handle
	NABD_SERVICE="nabd" ; NABD_SOCKET="nabd.socket"
	NABD_SOCKET_CONF="${SYSTEMD_DIR}/${NABD_SOCKET}"
	NABD_ADDR_KEY="ListenStream"; NABD_LOCAL_ADDR="127.0.0.1"; NABD_PUBLIC_ADDR="0.0.0.0"
	NABD_LOG="${LOG_DIR}/${NABD_SERVICE}.log"
	daemon_list=$(cd ${SYSTEMD_DIR}; /bin/ls nab*d.service nabradio.service nabwebhook.service 2>/dev/null | sed -e "s/\.service//g")
	for service in ${daemon_list}
	do
		[ "${service}" = "${NABD_SERVICE}" ] && continue
		daemon_services="${daemon_services} ${service}"
		DAEMON_LOGS="${DAEMON_LOGS} ${LOG_DIR}/${service}.log"
	done
	web_services="nabweb nabblockly"
	PYNAB_SERVICES="${daemon_services} ${web_services}"

	if [ -t 1 ]; then
		# Text attributes
		BOLD=`tput bold`; STD=`tput sgr0`
		RED=`tput setaf 1`; YELLOW=`tput setaf 3`; GREEN=`tput setaf 2`; BLUE=`tput setaf 4`
	else
		BOLD=""; STD=""
		RED=""; YELLOW=""; GREEN=""; BLUE=""
	fi
}
# ------------------------------
usage() {
	[ -n "${1}" ] && echo "Illegal option ${1}" >&2
	echo "Usage: ${SELF} [-status | -start | -stop | -restart | -enable | -disable | -local | -public | -log [NUM]]"
	echo "\tno option :\tshow status of Pynab services"
	echo "\t    -help :\tthis usage help"
	echo "\t   -start :\tstart Pynab services"
	echo "\t    -stop :\tstop Pynab services"
	echo "\t -restart :\trestart Pynab services"
	echo "\t  -enable :\tenable Pynab services"
	echo "\t -disable :\tdisable Pynab services"
	echo "\t  -status :\tshow status of Pynab services"
	echo "\t   -local :\trestrict nabd socket to local access"
	echo "\t  -public :\topen nabd socket to public access"
	echo "\t     -log :\tshow log tails (last NUM lines) for Pynab daemons"
}
# ------------------------------
get_options() {
	ARG1=${1:-"-status"}
	ARG2=${2:-""}

	case "${ARG1}" in
	    -star*)
		CMD="start" ;;
	    -sto*)
		CMD="stop" ;;
	    -r*)
		CMD="restart" ;;
	    -e*)
		CMD="enable" ;;
	    -d*)
		CMD="disable" ;;
	    -stat*)
		CMD="status" ;;
	    -loc*)
		CMD="socket" ; ARG="${NABD_LOCAL_ADDR}" ;;
	    -p*)
		CMD="socket" ; ARG="${NABD_PUBLIC_ADDR}" ;;
	    -log)
		case ${ARG2} in
		    *[!0-9]*)
			echo "Invalid NUM value for '-log': ${BOLD}'${ARG2}'${STD}!" >&2
			usage; exit 42 ;;
		    '')
			ARG=10 ;;
		    *)
			ARG=${ARG2} ;;
		esac
		CMD="log" ;;
	    -h*)
		usage
		exit 0 ;;
	    *)
		usage "${ARG1}"
		exit 42 ;;
	esac
}
# ------------------------------
start_services() {
	if [ -n "${PYNAB_SERVICES}" ]; then
		echo "Starting Pynab services..."
		systemctl --quiet is-enabled ${NABD_SOCKET}
		if [ $? -eq 0 ]; then
			cmd="sudo systemctl start ${NABD_SOCKET}" ; echo "${BOLD}${cmd}${STD}"
			eval $cmd
			status=$? ; [ $status -ne 0 ] && return $status
		fi
		systemctl --quiet is-enabled ${NABD_SERVICE}
		if [ $? -eq 0 ]; then
			cmd="sudo systemctl start ${NABD_SERVICE}" ; echo "${BOLD}${cmd}${STD}"
			eval $cmd
			status=$? ; [ $status -ne 0 ] && return $status
		fi
		for service in ${PYNAB_SERVICES}
		do
			systemctl --quiet is-enabled ${service}
			if [ $? -eq 0 ]; then
				pynab_services="${pynab_services} ${service}"
			fi
		done
		cmd="sudo systemctl start ${pynab_services}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
	else
		status=0
	fi
	return $status
}
# ------------------------------
stop_services() {
	if [ -n "${PYNAB_SERVICES}" ]; then
		echo "Stopping Pynab services..."
		cmd="sudo systemctl stop ${PYNAB_SERVICES}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
		cmd="sudo systemctl stop ${NABD_SOCKET}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
		cmd="sudo systemctl stop ${NABD_SERVICE}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
	else
		status=0
	fi
	return $status
}
# ------------------------------
enable_services() {
	if [ -n "${PYNAB_SERVICES}" ]; then
		echo "Enabling Pynab services..."
		cmd="sudo systemctl enable ${PYNAB_SERVICES}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
		cmd="sudo systemctl enable ${NABD_SOCKET}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
		cmd="sudo systemctl enable ${NABD_SERVICE}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
	else
		status=0
	fi
	return $status
}
# ------------------------------
disable_services() {
	if [ -n "${PYNAB_SERVICES}" ]; then
		echo "Disabling Pynab services..."
		cmd="sudo systemctl disable --now ${PYNAB_SERVICES}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
		cmd="sudo systemctl disable --now ${NABD_SOCKET}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
		cmd="sudo systemctl disable --now ${NABD_SERVICE}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
	else
		status=0
	fi
	return $status
}
# ------------------------------
status_services() {
	if [ -n "${PYNAB_SERVICES}" ]; then
		echo "Status of Pynab services:"
		cmd="systemctl ${STATUS_OPTS} status ${NABD_SOCKET}" ; echo "\n${BOLD}${cmd}${STD}"
		eval $cmd
		status=$?
		cmd="systemctl ${STATUS_OPTS} status ${NABD_SERVICE}" ; echo "\n${BOLD}${cmd}${STD}"
		eval $cmd
		status=$?
		cmd="systemctl ${STATUS_OPTS} status ${PYNAB_SERVICES}" ; echo "\n${BOLD}${cmd}${STD}"
		eval $cmd
		status=$?

		systemctl --quiet is-active ${NABD_SOCKET}
		if [ $? -eq 0 ]; then
			echo
			socket_conf
		fi
	else
		status=0
	fi
	return $status
}
# ------------------------------
socket_conf() {
	nabd_addr=$1
	cur_nabd_addr=$(grep "^${NABD_ADDR_KEY}=" ${NABD_SOCKET_CONF} | sed -e "s/${NABD_ADDR_KEY}=//" -e "s/:.*$//")
	if [ -z "${cur_nabd_addr}" ]; then
		echo "${BOLD}Could not access nabd socket configuration file '$NABD_SOCKET_CONF'!${STD}"
		exit 1
	fi
	[ -z "${nabd_addr}" ] && nabd_addr=${cur_nabd_addr}

	if [ "${nabd_addr}" != "${cur_nabd_addr}" ]; then
		echo "Reconfiguring nabd socket..."
		sudo sed -i -e "s/^${NABD_ADDR_KEY}=${cur_nabd_addr}/${NABD_ADDR_KEY}=${nabd_addr}/" ${NABD_SOCKET_CONF}
		status=$?
		if [ $status -ne 0 ]; then
			echo "${BOLD}Could not update nabd socket configuration file '$NABD_SOCKET_CONF'!${STD}"
			exit $status
		fi

		cmd="sudo systemctl daemon-reload" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$? ; [ $status -ne 0 ] && return $status
		stop_services
		status=$? ; [ $status -ne 0 ] && return $status
		start_services
		status=$? ; [ $status -ne 0 ] && return $status

		cmd="systemctl ${STATUS_OPTS} status ${NABD_SOCKET}" ; echo "${BOLD}${cmd}${STD}"
		eval $cmd
		status=$?
		echo
	fi

	case "${nabd_addr}" in
	    ${NABD_LOCAL_ADDR})
		echo "Note: ${GREEN}nabd only accessible on local (${nabd_addr}) socket.${STD}" ;;
	    ${NABD_PUBLIC_ADDR})
		echo "Warning: ${RED}nabd fully accessible on public (${nabd_addr}) socket.${STD}" ;;
	    *)
		echo "Note: ${YELLOW}nabd accessible on specific (${nabd_addr}) socket.${STD}" ;;
	esac
	return $status
}
# ------------------------------
log_services() {
	lines=$1
	if [ -n "${DAEMON_LOGS}" ]; then
		echo "Log tails for Pynab daemons:"
		cmd="tail ${LOG_OPTS} -n ${lines} ${DAEMON_LOGS}" ; echo "\n${BOLD}${cmd}${STD}"
		eval $cmd
		status=$?
		cmd="tail ${LOG_OPTS} -n ${lines} ${NABD_LOG}" ; echo "\n${BOLD}${cmd}${STD}"
		eval $cmd
		status=$?
	else
		status=0
	fi
	return $status
}
# ------------------------------
set_defaults $*
get_options $*
case "${CMD}" in
    start)
	start_services ;;
    stop)
	stop_services ;;
    restart)
	stop_services && start_services ;;
    enable)
	enable_services ;;
    disable)
	disable_services ;;
    status)
	status_services ;;
    socket)
	socket_conf ${ARG} ;;
    log)
	log_services ${ARG} ;;
esac
# ------------------------------
exit $?
#
