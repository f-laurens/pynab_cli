#!/bin/bash
# Wrapper script to rebuild drivers for Pynab
# ------------------------------
set_defaults() {
	SELF=$(basename "${0}")
	# Pynab defaults
	systemd_dir="/lib/systemd/system"
	nabd_service=${systemd_dir}/nabd.service
	PYNAB=$(sed -nE -e 's|WorkingDirectory=(.+)|\1|p' ${nabd_service} 2>/dev/null)

	REBUILD=""

	if [ -t 1 ]
	then
		# Text attributes
		BOLD=`tput bold`; STD=`tput sgr0`
		RED=`tput setaf 1`; YELLOW=`tput setaf 3`; GREEN=`tput setaf 2`; BLUE=`tput setaf 4`
	else
		BOLD=""; STD=""
		RED=""; YELLOW=""; GREEN=""; BLUE=""
	fi
}
# ------------------------------
check_pynab() {
	if [ ! -d "${PYNAB}" ]; then
		/bin/echo "${RED}Cannot locate Pynab repository!${STD}"
		exit 42
	else
		ROOT=$(dirname ${PYNAB})
	fi

        owner=`stat -c '%U' ${PYNAB}`
	if [ "$(id -un)" != "${owner}" ]; then
		/bin/echo "${RED}${SELF} must be run as user ${owner}.${STD}"
		exit 1
	fi
}
# ------------------------------
usage() {
	/bin/echo "Usage: ${SELF} [-f]"
	/bin/echo -e "\tRebuild (if -f) TagTagTag drivers for Pynab"
}
# ------------------------------
get_options() {
	while getopts "fh" option
	do
		case $option in
		    f) REBUILD="force" ;;
		    h) usage; exit 0 ;;
		    \?) usage; exit 42 ;;
		esac
	done
	shift `expr $OPTIND - 1`
}
# ------------------------------
check_rebuild() {
	rebuild=$1
	if [ "${rebuild}" = "force" ]; then
		/usr/bin/touch ${PYNAB}/.rebuild_drivers
	fi

	if [ -f ${PYNAB}/.rebuild_drivers ]; then
		/bin/rm ${PYNAB}/.rebuild_drivers
		/bin/echo "${BLUE}Rebuilding TagtagTag drivers...${STD}"
		status=0
	else
		/bin/echo -e "${YELLOW}Not building TagTagTag drivers (use -f option to force rebuild)...${STD}\n"
		exit 0
	fi
	return $status
}
# ------------------------------
build_driver() {
	driver=$1
	driver_type=$2
	/bin/echo -e "\n${BLUE}${driver_type} driver...${STD}"
	cd ${ROOT}
	if [ ! -d "${driver}" ]; then
		cmd="/usr/bin/git clone https://github.com/pguyot/${driver}" ; /bin/echo "${BOLD}${cmd}${STD}"
		eval $cmd
	fi
	if [ -d "${driver}" ]; then
		cd ${driver}
		cmd="/usr/bin/git pull -v" ; /bin/echo "${BOLD}${cmd}${STD}"
		eval $cmd
		for dir in /lib/modules/*/build
		do
			kernel=$(basename $(dirname ${dir}))
			echo "${BLUE}Building ${driver} driver for kernel ${kernel}.${STD}"
			cmd="/usr/bin/make KERNELRELEASE=${kernel} clean && /usr/bin/make KERNELRELEASE=${kernel} && /usr/bin/sudo /usr/bin/make KERNELRELEASE=${kernel} install && /usr/bin/make KERNELRELEASE=${kernel} clean" ; /bin/echo "${BOLD}${cmd}${STD}"
			eval $cmd
			status=$? ; [ $status -ne 0 ] && break
		done
	else
		status=42
	fi
	if [ $status -ne 0 ]; then
		/bin/echo "${RED}Build failed for ${driver}! Aborting...${STD}"
		exit $status
	fi
	return $status
}
# ------------------------------
reboot_after_build() {
	cd ${ROOT}
	/bin/echo -e "\n${RED}Rebooting...${STD}"
	cmd="/usr/bin/sudo /bin/systemctl reboot" ; /bin/echo "${BOLD}${cmd}${STD}"
	eval $cmd
}
# ------------------------------
set_defaults
check_pynab
get_options $*
check_rebuild ${REBUILD}

build_driver wm8960 "WM8960 (sound)"
build_driver cr14 "CR14 (RFID)"
build_driver st25r391x "ST25R3916/7 (NFC)"
build_driver tagtagtag-ears "Ears"

reboot_after_build
# ------------------------------
exit $?
#
