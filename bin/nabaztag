#!/bin/bash
# Get/set Nabaztag state thru nabd
# ref: https://github.com/nabaztag2018/pynab/blob/master/PROTOCOL.md
# ------------------------------
set_defaults() {
	SELF=$(basename "${0}")

	# nc (netcat) option defaults
	NETCAT_TIMEOUT=""
	NETCAT_OPTS="-4 -v -w "
	NETCAT_OPTS1="-4 -d -v -w 1"
	NETCAT_OPTS2="-4 -v -w 2"
	NETCAT_OPTS5="-4 -v -w 5"
	NABD_HOST=localhost; NABD_PORT=10543
	VIRTUAL_NABD=""; VIRTUAL_NABD_PORT=10544

	REQUESTOR="${SELF}@$(hostname)"

	GESTALT_PACKET="{\\\"type\\\": \\\"gestalt\\\", \\\"request_id\\\": \\\"${REQUESTOR}\\\"}"
	TEST_EARS_PACKET="{\\\"type\\\": \\\"test\\\", \\\"test\\\": \\\"ears\\\", \\\"request_id\\\": \\\"${REQUESTOR}\\\"}"
	TEST_LEDS_PACKET="{\\\"type\\\": \\\"test\\\", \\\"test\\\": \\\"leds\\\", \\\"request_id\\\": \\\"${REQUESTOR}\\\"}"
	MODE_PACKET="{\\\"type\\\": \\\"mode\\\", \\\"mode\\\": \\\"idle\\\", \\\"events\\\": [\\\"asr/*\\\",\\\"button\\\",\\\"ears\\\",\\\"rfid/*\\\"], \\\"request_id\\\": \\\"${REQUESTOR}\\\"}"
	SLEEP_PACKET="{\\\"type\\\": \\\"sleep\\\", \\\"request_id\\\": \\\"${REQUESTOR}\\\"}"
	WAKEUP_PACKET="{\\\"type\\\": \\\"wakeup\\\", \\\"request_id\\\": \\\"${REQUESTOR}\\\"}"
	HOST=${NABD_HOST}

	if [ -t 1 ]; then
		# Text attributes
		BOLD=`tput bold`; STD=`tput sgr0`
		RED=`tput setaf 1`; YELLOW=`tput setaf 3`; GREEN=`tput setaf 2`; BLUE=`tput setaf 4`
	else
		BOLD=""; STD=""
		RED=""; YELLOW=""; GREEN=""; BLUE=""
	fi

	if [ "$(which nc)" == "" ]; then
		echo "${RED}nc command not available${STD} - please install ${BOLD}netcat-openbsd${STD} package."
		exit 3
	fi
}
# ------------------------------
usage() {
	echo -e "Usage: ${SELF} [-g | -e | -l | -m | -s | -w | -p LEFT.RIGHT | -r | -v | -c COMMANDFILE] [HOST]"
	echo -e "\tTalk to rabbit HOST (default: ${NABD_HOST})"
	echo -e "\t no option :\tget state"
	echo -e "\t\t-h :\tthis usage help"
	echo -e "\t\t-g :\tget gestalt status"
	echo -e "\t\t-e :\texecute ears test"
	echo -e "\t\t-l :\texecute LEDs test"
	echo -e "\t\t-m :\tmonitor asr/button/ears/rfid events"
	echo -e "\t\t-s :\tgo to sleep"
	echo -e "\t\t-w :\twake up"
	echo -e "\t\t-p :\trotate ears to position LEFT.RIGHT"
	echo -e "\t\t-r :\trotate ears to random position"
	echo -e "\t\t-v :\tdisplay virtual rabbit (running in Docker on HOST)"
	echo -e "\t\t-c :\texecute given JSON COMMANDFILE"
}
# ------------------------------
get_options() {
	getopts "gelmswp:rvc:h" option
	if [ $? -eq 0 ]; then
		case $option in
		    g) PACKET=$GESTALT_PACKET ;;
		    e) PACKET=$TEST_EARS_PACKET ;;
		    l) PACKET=$TEST_LEDS_PACKET ;;
		    m) PACKET=$MODE_PACKET ; NETCAT_TIMEOUT=3600 ;;
		    s) PACKET=$SLEEP_PACKET ;;
		    w) PACKET=$WAKEUP_PACKET ;;
		    p) set_ears_packet "$OPTARG" ; PACKET=$EARS_PACKET ;;
		    r) set_ears_packet ; PACKET=$EARS_PACKET ;;
		    v) PACKET="" ; VIRTUAL_NABD="Docker" ;;
		    c) PACKET="" ; CMD_FILE="$OPTARG" ;;
		    h) usage; exit 0 ;;
		    \?) usage; exit 42 ;;
		esac
	else
		# no option
		PACKET=""
	fi
	shift `expr $OPTIND - 1`
	[ -n "$1" ] && HOST="$1"
}
# ------------------------------
set_ears_packet() {
	ears_pos=$1
	if [ -z "$ears_pos" ]; then
		RANDOM=$$
		left_pos=$(($RANDOM % 17)); right_pos=$(($RANDOM % 17))
	else
		left_pos=$(echo "$ears_pos" | awk -F. '{print $1}')
		right_pos=$(echo "$ears_pos" | awk -F. '{print $2}')
		case ${left_pos} in
		    ''|*[!0-9]*)
			echo "${RED}Invalid  LEFT value for '-p': ${BOLD}'${left_pos}'${STD}${RED}!${STD}" >&2
			ears_pos="" ;;
		    *)
			left_pos=$(($left_pos % 17)) ;;
		esac
		case ${right_pos} in
		    ''|*[!0-9]*)
			echo "${RED}Invalid RIGHT value for '-p': ${BOLD}'${right_pos}'${STD}${RED}!${STD}" >&2
			ears_pos="" ;;
		    *)
			right_pos=$(($right_pos % 17)) ;;
		esac
		if [ -z "$ears_pos" ]; then
			usage; exit 2
		fi
	fi
	EARS_PACKET="{\\\"type\\\": \\\"ears\\\", \\\"left\\\": ${left_pos}, \\\"right\\\": ${right_pos}, \\\"event\\\": true, \\\"request_id\\\": \\\"${REQUESTOR}\\\"}"
	return 0
}
# ------------------------------
nc_nabd() {
	if [ -z "$PACKET" ]; then
		if [ -n "$CMD_FILE" ]; then
			if [ -f "$CMD_FILE" ]; then
				cmd_file="$CMD_FILE"
			elif [ -f "${CMD_FILE}.json" ]; then
				cmd_file="${CMD_FILE}.json"
			else
				echo "${RED}JSON command file '$CMD_FILE' not found!${STD}"
				exit 1
			fi
			cmd="cat $cmd_file | nc $NETCAT_OPTS5 $HOST $NABD_PORT"; echo "${BOLD}${cmd}${STD}"
			eval $cmd
		elif [ -n "$VIRTUAL_NABD" ]; then
			cmd="nc $NETCAT_OPTS1 $HOST $VIRTUAL_NABD_PORT"; echo "${BOLD}${cmd}${STD}"
			eval $cmd
		else
			cmd="nc $NETCAT_OPTS1 $HOST $NABD_PORT"; echo "${BOLD}${cmd}${STD}"
			eval $cmd
		fi
	elif [ -n "$NETCAT_TIMEOUT" ]; then
		cmd="echo $PACKET | nc $NETCAT_OPTS$NETCAT_TIMEOUT $HOST $NABD_PORT"; echo "${BOLD}${cmd}${STD}"
		eval $cmd
	else
		cmd="echo $PACKET | nc $NETCAT_OPTS2 $HOST $NABD_PORT"; echo "${BOLD}${cmd}${STD}"
		eval $cmd
	fi
	status=$?
	return $status
}

# ------------------------------
set_defaults
get_options $*
nc_nabd
# ------------------------------
exit $?
#
